servers:
  ptv6proxy:
    type: tigerProxy
    startupTimeoutSec: 60
    tigerProxyConfiguration:
      proxyLogLevel: ${tiger.loglevel}
      proxyPort: ${free.port.3}
      proxyRoutes:
        - from: /
          to: http://localhost:${free.port.2}
          criterions:
            - message.method == 'POST'
            - message.path == '/ws/CardService'
            - "$.header.soapaction =~ 'http://ws.gematik.de/conn/CardService/v8.2#.*'"
        - from: /
          to: https://localhost:${free.port.1}

  mockCardService:
    type: zion
    zionConfiguration:
      serverPort: ${free.port.2}
      mockResponses:
        startCardSession:
          requestCriterions:
            - message.method == 'POST'
            - message.path == '/ws/CardService'
            - "'?{$.header.soapaction}' == 'http://ws.gematik.de/conn/CardService/v8.2#StartCardSession'"
          response:
            statusCode: 200
            headers:
              Content-Type: "application/soap+xml; charset=utf-8"
            bodyFile: src/main/resources/connector_CardService_StartCardSession_Response.xml
        stopCardSession:
          requestCriterions:
            - message.method == 'POST'
            - message.path == '/ws/CardService'
            - "'?{$.header.soapaction}' == 'http://ws.gematik.de/conn/CardService/v8.2#StopCardSession'"
          response:
            statusCode: 200
            headers:
              Content-Type: "application/soap+xml; charset=utf-8"
            bodyFile: src/main/resources/connector_CardService_StopCardSession_Response.xml
        secureSendAPDU:
          requestCriterions:
            - message.method == 'POST'
            - message.path == '/ws/CardService'
            - "'?{$.header.soapaction}' == 'http://ws.gematik.de/conn/CardService/v8.2#SecureSendAPDU'"
          nestedResponses:
            okResponse:
              importance: 1
              requestCriterions:
                - "'?{$.body.SecureSendAPDU.SignedScenario.text}' == '00b0910000'"
              response:
                statusCode: 200
                headers:
                  Content-Type: "application/soap+xml; charset=utf-8"
                bodyFile: src/main/resources/connector_CardService_SecureSendAPDU_Response_OK.xml
            errorReponse:
              response:
                statusCode: 200
                headers:
                  Content-Type: "application/soap+xml; charset=utf-8"
                bodyFile: src/main/resources/connector_CardService_SecureSendAPDU_Response_Error.xml

  proxykon:
    type: tigerProxy
    startupTimeoutSec: 60
    tigerProxyConfiguration:
      proxyLogLevel: ${tiger.loglevel}
      proxyPort: ${free.port.1}
      adminPort: ${data.connector.adminport}
      rewriteHostHeader: true
      proxyRoutes:
        - from: /
          to: ${data.connector.address_konnektor}
      modifications:
        # the first condition is gematik intern only
        - condition: isResponse
          regexFilter: ${data.connector.address_konnektor}
          name: replace hostname
          targetElement: $.body
          replaceWith: http://127.0.0.1:${data.connector.port}
        # Sign Document
        - condition: "isRequest && $.header.soapaction == 'http://ws.gematik.de/conn/SignatureService/v7.5#SignDocument' && $.body.Envelope.Body.SignDocument.Crypt != null"
          regexFilter: '>(RSA|RSA_ECC)<\/'
          name: replace crypt in SignDocument
          targetElement: "$.body"
          replaceWith: ">RSA_ECC</"
        - condition: "isRequest && $.header.soapaction == 'http://ws.gematik.de/conn/SignatureService/v7.5#SignDocument' && $.body.Envelope.Body.SignDocument.Crypt == null"
          regexFilter: '<\/(?:\w*:)?CardHandle\s*>'
          name: add crypt in SignDocument
          targetElement: "$.body"
          replaceWith: '$0<Crypt xmlns="http://ws.gematik.de/conn/SignatureService/v7.5">RSA_ECC</Crypt>'
        # Check Certificate Expiration
        - condition: "isRequest && $.header.soapaction == 'http://ws.gematik.de/conn/CertificateService/v6.0#CheckCertificateExpiration' && $.body.Envelope.Body.CheckCertificateExpiration.Crypt == null"
          regexFilter: '<\/(?:\w*:)?Context\s*>'
          name: insert crypt in CheckCertificateExpiration
          targetElement: "$.body"
          replaceWith: '$0<Crypt xmlns="http://ws.gematik.de/conn/CertificateService/v6.0">ECC</Crypt>'
          # Encrypt Document
        - condition: "isRequest && $.header.soapaction == 'http://ws.gematik.de/conn/EncryptionService/v6.1#EncryptDocument' && $.body.Envelope.Body.EncryptDocument.RecipientKeys.CertificateOnCard.Crypt != null"
          regexFilter: '>(RSA|RSA_ECC|ECC)<\/'
          name: change crypt in EncryptDocument
          targetElement: "$.body"
          replaceWith: '>ECC<\/'
        - condition: "isRequest && $.header.soapaction == 'http://ws.gematik.de/conn/EncryptionService/v6.1#EncryptDocument' && $.body.Envelope.Body.EncryptDocument.RecipientKeys.CertificateOnCard.Crypt == null"
          regexFilter: '<\/(?:\w*:)?CardHandle\s*>'
          name: insert crypt in EncryptDocument
          targetElement: "$.body"
          replaceWith: '$0<Crypt xmlns="http://ws.gematik.de/conn/EncryptionService/v6.1">ECC</Crypt>'
          # Read Card Certificate
        - condition: "isRequest && $.header.soapaction == 'http://ws.gematik.de/conn/CertificateService/v6.0#ReadCardCertificate' && $.body.Envelope.Body.ReadCardCertificate.Crypt == null"
          regexFilter: '<\/(?:\w*:)?ReadCardCertificate\s*>'
          name: insert crypt in ReadCardCertificate
          targetElement: "$.body"
          replaceWith: '<Crypt xmlns="http://ws.gematik.de/conn/CertificateService/v6.0">ECC</Crypt>$0'
        # External Authenticate
        - condition: "isRequest && $.header.soapaction == 'http://ws.gematik.de/conn/SignatureService/v7.4#ExternalAuthenticate' && $.body.Envelope.Body.ExternalAuthenticate.OptionalInputs != null"
          regexFilter: '<(?:\w*:)?OptionalInputs\s*>(?s).*<\/(?:\w*:)?OptionalInputs\s*>'
          name: set OptionalInputs SignatureType to ECDSA, make sure there's no SignatureSchemes
          targetElement: "$.body"
          replaceWith: '<OptionalInputs xmlns="http://ws.gematik.de/conn/SignatureService/v7.4"><SignatureType xmlns="urn:oasis:names:tc:dss:1.0:core:schema">urn:bsi:tr:03111:ecdsa</SignatureType></OptionalInputs>'
        - condition: "isRequest && $.header.soapaction == 'http://ws.gematik.de/conn/SignatureService/v7.4#ExternalAuthenticate' && $.body.Envelope.Body.ExternalAuthenticate.OptionalInputs == null"
          regexFilter: '<(?:\w*:)?BinaryString'
          name: insert OptionalInputs with SignatureType to ECDSA and no SignatureSchemes
          targetElement: "$.body"
          replaceWith: '<OptionalInputs xmlns="http://ws.gematik.de/conn/SignatureService/v7.4"><SignatureType xmlns="urn:oasis:names:tc:dss:1.0:core:schema">urn:bsi:tr:03111:ecdsa</SignatureType></OptionalInputs>$0'

tigerProxy:
  proxyPort: ${data.connector.port}
  proxyLogLevel: ${tiger.loglevel}
  activeForwardAllLogging: true
  skipTrafficEndpointsSubscription: false
  activateRbelParsingFor: [ "asn1", "X509" ]
  trafficEndpoints:
    - http://127.0.0.1:${data.connector.adminport}
  proxyRoutes:
    - from: https://ptv6proxy
      to: https://localhost:${free.port.3}

lib:
  activateWorkflowUi: false

additionalConfigurationFiles:
  - filename: data.yaml
    baseKey: data
